{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"activeOpacity\", \"isInList\", \"duration\", \"easing\", \"disabled\", \"disabledOpacity\", \"ref\", \"style\", \"onPress\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useMemo } from 'react';\nimport { TapGestureHandler } from 'react-native-gesture-handler';\nimport Reanimated, { withDelay, Easing, useAnimatedGestureHandler, useAnimatedStyle, useSharedValue, withTiming, useDerivedValue, runOnJS } from 'react-native-reanimated';\nimport { PRESSABLE_IN_LIST_DELAY } from \"./Constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function NativePressableOpacity(props) {\n  var _props$activeOpacity = props.activeOpacity,\n      activeOpacity = _props$activeOpacity === void 0 ? 0.2 : _props$activeOpacity,\n      isInList = props.isInList,\n      _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 50 : _props$duration,\n      _props$easing = props.easing,\n      easing = _props$easing === void 0 ? Easing.linear : _props$easing,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disabledOpacit = props.disabledOpacity,\n      disabledOpacity = _props$disabledOpacit === void 0 ? 0.3 : _props$disabledOpacit,\n      ref = props.ref,\n      style = props.style,\n      onPress = props.onPress,\n      passThroughProps = _objectWithoutProperties(props, _excluded);\n\n  var isPressed = useSharedValue(false);\n  var timingConfig = useMemo(function () {\n    return {\n      duration: duration,\n      easing: easing\n    };\n  }, [duration, easing]);\n  var opacity = useDerivedValue(function () {\n    var _f = function _f() {\n      if (disabled) {\n        return withTiming(disabledOpacity, timingConfig);\n      } else {\n        if (isPressed.value) {\n          if (isInList) {\n            return withDelay(PRESSABLE_IN_LIST_DELAY, withTiming(activeOpacity, timingConfig));\n          } else {\n            return withTiming(activeOpacity, timingConfig);\n          }\n        } else {\n          return withTiming(1, timingConfig);\n        }\n      }\n    };\n\n    _f._closure = {\n      disabled: disabled,\n      withTiming: withTiming,\n      disabledOpacity: disabledOpacity,\n      timingConfig: timingConfig,\n      isPressed: isPressed,\n      isInList: isInList,\n      withDelay: withDelay,\n      PRESSABLE_IN_LIST_DELAY: PRESSABLE_IN_LIST_DELAY,\n      activeOpacity: activeOpacity\n    };\n    _f.asString = \"function _f(){const{disabled,withTiming,disabledOpacity,timingConfig,isPressed,isInList,withDelay,PRESSABLE_IN_LIST_DELAY,activeOpacity}=jsThis._closure;{if(disabled){return withTiming(disabledOpacity,timingConfig);}else{if(isPressed.value){if(isInList){return withDelay(PRESSABLE_IN_LIST_DELAY,withTiming(activeOpacity,timingConfig));}else{return withTiming(activeOpacity,timingConfig);}}else{return withTiming(1,timingConfig);}}}}\";\n    _f.__workletHash = 3128094652434;\n    _f.__location = \"/Users/todddunning/Desktop/Cala/PatientApp/node_modules/react-native-pressable-opacity/dist/NativePressableOpacity.js (12:36)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [disabled, disabledOpacity, timingConfig, isPressed, isInList, activeOpacity]);\n  var animatedStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      return {\n        opacity: opacity.value\n      };\n    };\n\n    _f._closure = {\n      opacity: opacity\n    };\n    _f.asString = \"function _f(){const{opacity}=jsThis._closure;{return{opacity:opacity.value};}}\";\n    _f.__workletHash = 1880562015862;\n    _f.__location = \"/Users/todddunning/Desktop/Cala/PatientApp/node_modules/react-native-pressable-opacity/dist/NativePressableOpacity.js (30:43)\";\n    _f.__optimalization = 3;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [opacity]);\n  var onGestureEvent = useAnimatedGestureHandler({\n    onStart: function () {\n      var _f = function _f() {\n        isPressed.value = true;\n      };\n\n      _f._closure = {\n        isPressed: isPressed\n      };\n      _f.asString = \"function _f(){const{isPressed}=jsThis._closure;{isPressed.value=true;}}\";\n      _f.__workletHash = 11277478272338;\n      _f.__location = \"/Users/todddunning/Desktop/Cala/PatientApp/node_modules/react-native-pressable-opacity/dist/NativePressableOpacity.js (32:17)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onEnd: function () {\n      var _f = function _f() {\n        runOnJS(onPress)();\n      };\n\n      _f._closure = {\n        runOnJS: runOnJS,\n        onPress: onPress\n      };\n      _f.asString = \"function _f(){const{runOnJS,onPress}=jsThis._closure;{runOnJS(onPress)();}}\";\n      _f.__workletHash = 6061191350800;\n      _f.__location = \"/Users/todddunning/Desktop/Cala/PatientApp/node_modules/react-native-pressable-opacity/dist/NativePressableOpacity.js (35:15)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onFinish: function () {\n      var _f = function _f() {\n        isPressed.value = false;\n      };\n\n      _f._closure = {\n        isPressed: isPressed\n      };\n      _f.asString = \"function _f(){const{isPressed}=jsThis._closure;{isPressed.value=false;}}\";\n      _f.__workletHash = 5469462184409;\n      _f.__location = \"/Users/todddunning/Desktop/Cala/PatientApp/node_modules/react-native-pressable-opacity/dist/NativePressableOpacity.js (38:18)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }()\n  }, [isPressed, onPress]);\n  return _jsx(TapGestureHandler, {\n    ref: ref,\n    onGestureEvent: onGestureEvent,\n    enabled: !disabled,\n    shouldCancelWhenOutside: true,\n    children: _jsx(Reanimated.View, _objectSpread({\n      style: [style, animatedStyle]\n    }, passThroughProps))\n  });\n}","map":{"version":3,"sources":["/Users/todddunning/Desktop/Cala/PatientApp/node_modules/react-native-pressable-opacity/dist/NativePressableOpacity.js"],"names":["React","useMemo","TapGestureHandler","Reanimated","withDelay","Easing","useAnimatedGestureHandler","useAnimatedStyle","useSharedValue","withTiming","useDerivedValue","runOnJS","PRESSABLE_IN_LIST_DELAY","NativePressableOpacity","props","activeOpacity","isInList","duration","easing","linear","disabled","disabledOpacity","ref","style","onPress","passThroughProps","isPressed","timingConfig","opacity","value","animatedStyle","onGestureEvent","onStart","onEnd","onFinish"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { TapGestureHandler } from 'react-native-gesture-handler';\nimport Reanimated, { withDelay, Easing, useAnimatedGestureHandler, useAnimatedStyle, useSharedValue, withTiming, useDerivedValue, runOnJS, } from 'react-native-reanimated';\nimport { PRESSABLE_IN_LIST_DELAY } from './Constants';\n/**\n * A Pressable that lowers opacity when pressed. Uses the native responder system from react-native-gesture-handler instead of the JS Pressability API.\n */\nexport function NativePressableOpacity(props) {\n    const { activeOpacity = 0.2, isInList, duration = 50, easing = Easing.linear, disabled = false, disabledOpacity = 0.3, ref, style, onPress, ...passThroughProps } = props;\n    const isPressed = useSharedValue(false);\n    const timingConfig = useMemo(() => ({ duration, easing }), [duration, easing]);\n    const opacity = useDerivedValue(() => {\n        if (disabled) {\n            return withTiming(disabledOpacity, timingConfig);\n        }\n        else {\n            if (isPressed.value) {\n                if (isInList) {\n                    return withDelay(PRESSABLE_IN_LIST_DELAY, withTiming(activeOpacity, timingConfig));\n                }\n                else {\n                    return withTiming(activeOpacity, timingConfig);\n                }\n            }\n            else {\n                return withTiming(1, timingConfig);\n            }\n        }\n    }, [disabled, disabledOpacity, timingConfig, isPressed, isInList, activeOpacity]);\n    const animatedStyle = useAnimatedStyle(() => ({ opacity: opacity.value }), [opacity]);\n    const onGestureEvent = useAnimatedGestureHandler({\n        onStart: () => {\n            isPressed.value = true;\n        },\n        onEnd: () => {\n            runOnJS(onPress)();\n        },\n        onFinish: () => {\n            isPressed.value = false;\n        },\n    }, [isPressed, onPress]);\n    return (<TapGestureHandler ref={ref} onGestureEvent={onGestureEvent} enabled={!disabled} shouldCancelWhenOutside={true}>\n\t\t\t<Reanimated.View style={[style, animatedStyle]} {...passThroughProps}/>\n\t\t</TapGestureHandler>);\n}\n"]},"metadata":{},"sourceType":"module"}