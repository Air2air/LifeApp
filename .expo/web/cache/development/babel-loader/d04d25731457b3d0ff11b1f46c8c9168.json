{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport 'react-native-gesture-handler';\nimport { useState, useEffect } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar window = Dimensions.get('window');\nvar screen = Dimensions.get('screen');\nexport var DimensionsBox = function DimensionsBox() {\n  var _useState = useState({\n    window: window,\n    screen: screen\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      dimensions = _useState2[0],\n      setDimensions = _useState2[1];\n\n  useEffect(function () {\n    var subscription = Dimensions.addEventListener('change', function (_ref) {\n      var window = _ref.window,\n          screen = _ref.screen;\n      setDimensions({\n        window: window,\n        screen: screen\n      });\n    });\n    return function () {\n      return subscription == null ? void 0 : subscription.remove();\n    };\n  });\n  return _jsx(View, {\n    style: styles.dimensions,\n    children: Object.entries(dimensions.screen).map(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          value = _ref3[1];\n\n      return _jsxs(Text, {\n        style: styles.text,\n        children: [key, \": \", _jsx(Text, {\n          style: styles.bold,\n          children: value\n        })]\n      }, key);\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  dimensions: {\n    position: 'absolute',\n    bottom: 90,\n    right: 0,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    height: 80,\n    width: 94,\n    color: Colors.WHITE,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  },\n  text: {\n    textTransform: 'uppercase',\n    fontSize: 13,\n    color: Colors.LIGHT_GRAY\n  },\n  bold: {\n    fontSize: 13,\n    fontWeight: 'bold',\n    color: Colors.WHITE\n  }\n});","map":{"version":3,"sources":["/Users/todddunning/Desktop/Cala/PatientApp/src/components/DimensionsBox.js"],"names":["useState","useEffect","window","Dimensions","get","screen","DimensionsBox","dimensions","setDimensions","subscription","addEventListener","remove","styles","Object","entries","map","key","value","text","bold","StyleSheet","create","position","bottom","right","display","flexDirection","justifyContent","alignItems","height","width","color","Colors","WHITE","backgroundColor","textTransform","fontSize","LIGHT_GRAY","fontWeight"],"mappings":";AAAA,OAAO,8BAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;;;;;AAGA,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;AACA,IAAMC,MAAM,GAAGF,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;AAEA,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,kBAAoCN,QAAQ,CAAC;AAAEE,IAAAA,MAAM,EAANA,MAAF;AAAUG,IAAAA,MAAM,EAANA;AAAV,GAAD,CAA5C;AAAA;AAAA,MAAOE,UAAP;AAAA,MAAmBC,aAAnB;;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMQ,YAAY,GAAGN,UAAU,CAACO,gBAAX,CACnB,QADmB,EAEnB,gBAAwB;AAAA,UAArBR,MAAqB,QAArBA,MAAqB;AAAA,UAAbG,MAAa,QAAbA,MAAa;AACtBG,MAAAA,aAAa,CAAC;AAAEN,QAAAA,MAAM,EAANA,MAAF;AAAUG,QAAAA,MAAM,EAANA;AAAV,OAAD,CAAb;AACD,KAJkB,CAArB;AAMA,WAAO;AAAA,aAAMI,YAAN,oBAAMA,YAAY,CAAEE,MAAd,EAAN;AAAA,KAAP;AACD,GARQ,CAAT;AAUA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACL,UAApB;AAAA,cACGM,MAAM,CAACC,OAAP,CAAeP,UAAU,CAACF,MAA1B,EAAkCU,GAAlC,CAAsC;AAAA;AAAA,UAAEC,GAAF;AAAA,UAAOC,KAAP;;AAAA,aACrC,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACM,IAApB;AAAA,mBACGF,GADH,QACS,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEJ,MAAM,CAACO,IAApB;AAAA,oBAA2BF;AAA3B,UADT;AAAA,SAA+BD,GAA/B,CADqC;AAAA,KAAtC;AADH,IADF;AASD,CAtBM;AAwBP,IAAMJ,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/Bd,EAAAA,UAAU,EAAE;AACVe,IAAAA,QAAQ,EAAE,UADA;AAEVC,IAAAA,MAAM,EAAE,EAFE;AAGVC,IAAAA,KAAK,EAAE,CAHG;AAIVC,IAAAA,OAAO,EAAE,MAJC;AAKVC,IAAAA,aAAa,EAAE,QALL;AAMVC,IAAAA,cAAc,EAAE,cANN;AAOVC,IAAAA,UAAU,EAAE,QAPF;AAQVC,IAAAA,MAAM,EAAE,EARE;AASVC,IAAAA,KAAK,EAAE,EATG;AAUVC,IAAAA,KAAK,EAAEC,MAAM,CAACC,KAVJ;AAWVC,IAAAA,eAAe,EAAE;AAXP,GADmB;AAe/BhB,EAAAA,IAAI,EAAE;AACJiB,IAAAA,aAAa,EAAE,WADX;AAEJC,IAAAA,QAAQ,EAAE,EAFN;AAGJL,IAAAA,KAAK,EAAEC,MAAM,CAACK;AAHV,GAfyB;AAoB/BlB,EAAAA,IAAI,EAAE;AACJiB,IAAAA,QAAQ,EAAE,EADN;AAEJE,IAAAA,UAAU,EAAE,MAFR;AAGJP,IAAAA,KAAK,EAAEC,MAAM,CAACC;AAHV;AApByB,CAAlB,CAAf","sourcesContent":["import 'react-native-gesture-handler';\nimport { useState, useEffect } from 'react';\nimport { Dimensions, Text, View, StyleSheet } from 'react-native';\n\nconst window = Dimensions.get('window');\nconst screen = Dimensions.get('screen');\n\nexport const DimensionsBox = () => {\n  const [dimensions, setDimensions] = useState({ window, screen });\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener(\n      'change',\n      ({ window, screen }) => {\n        setDimensions({ window, screen });\n      },\n    );\n    return () => subscription?.remove();\n  });\n\n  return (\n    <View style={styles.dimensions}>\n      {Object.entries(dimensions.screen).map(([key, value]) => (\n        <Text style={styles.text} key={key}>\n          {key}: <Text style={styles.bold}>{value}</Text>\n        </Text>\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  dimensions: {\n    position: 'absolute',\n    bottom: 90,\n    right: 0,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    height: 80,\n    width: 94,\n    color: Colors.WHITE,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    //backgroundColor: 'red',\n  },\n  text: {\n    textTransform: 'uppercase',\n    fontSize: 13,\n    color: Colors.LIGHT_GRAY,\n  },\n  bold: {\n    fontSize: 13,\n    fontWeight: 'bold',\n    color: Colors.WHITE,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}